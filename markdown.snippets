# Functions{{{
# 定义math区域，snippets只在该区域生效，要求Vim能识别当前区域（安装Vim-markdown等插件）
# i 表示片段可在句中被触发。默认是只有在前面有多个空格或者在行首时才会被触发。
# A 表示片段会被自动触发
# w 表示片段只会在关键词为单独单词的情况下被触发
# r 表示关键词使用正则表达式。正则表达式必须用 两个引号' '包围
# b 表示只有在一行的开头才会被触发
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal
#}}}
#=================================================================================================
#My snippets{{{
snippet title "new post"
---
title:    "$1"
date:    `!v strftime("%Y-%m-%d")`
author:    "赵cp"
img:    "$2"
top:    ${3:false}
cover:    ${4:true}
coverImg:    "$2"
password:    ${5:}
toc:    ${6:false}
mathjax:    ${7:false}
summary:    ${8:}
categories:
    -  [ ${9: ${10: $13 ]
    -  [ $12 } ]
    -  [ $11 } ]
tags: 
    -  ${14: ${15: $18 
    -  $17 } 
    -  $16 } 

---

$0
endsnippet


snippet /e "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet


context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\w+)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}
endsnippet
# 希腊字母{{{
priority 1000
context "math()"
snippet '([Aa])lp' "alpha" wrA
\\`!p snip.rv = match.group(1)`lpha
endsnippet
priority 1000
context "math()"
snippet '([Bb])et' "beta" wrA
\\`!p snip.rv = match.group(1)`eta
endsnippet
context "math()"
snippet '([Gg])am' "gamma" wrA
\\`!p snip.rv = match.group(1)`amma
endsnippet
context "math()"
snippet '([Dd])el' "delta" wrA
\\`!p snip.rv = match.group(1)`elta
endsnippet
context "math()"
snippet '([Ee])ps' "epsilon" wrA
\\`!p snip.rv = match.group(1)`psilon
endsnippet
context "math()"
snippet '([Zz])et' "zeta" wrA
\\`!p snip.rv = match.group(1)`eta
endsnippet
context "math()"
snippet '([Nn])u' "nu" wrA
\\`!p snip.rv = match.group(1)`u
endsnippet
context "math()"
snippet '([Xx])i' "xi" wrA
\\`!p snip.rv = match.group(1)`i
endsnippet
context "math()"
snippet '([Pp])i' "pi" wrA
\\`!p snip.rv = match.group(1)`i
endsnippet
context "math()"
snippet '([Rr])ho' "rho" wrA
\\`!p snip.rv = match.group(1)`ho
endsnippet
context "math()"
snippet '([Ss])ig' "sigma" wrA
\\`!p snip.rv = match.group(1)`igma
endsnippet
context "math()"
snippet '([Ee])ta' "eta" wrA
\\`!p snip.rv = match.group(1)`ta
endsnippet
context "math()"
snippet '([Tt])he' "theta" wrA
\\`!p snip.rv = match.group(1)`heta
endsnippet
context "math()"
snippet '([Kk])ap' "kappa" wrA
\\`!p snip.rv = match.group(1)`appa
endsnippet
context "math()"
snippet '([Ll])am' "lambda" wrA
\\`!p snip.rv = match.group(1)`ambda
endsnippet
context "math()"
snippet '([Mm])u' "mu" wrA
\\`!p snip.rv = match.group(1)`u
endsnippet
context "math()"
snippet '([Tt])au' "tau" wrA
\\`!p snip.rv = match.group(1)`au
endsnippet
context "math()"
snippet '([Uu])ps' "upsilon" wrA
\\`!p snip.rv = match.group(1)`psilon
endsnippet
context "math()"
snippet '([Pp])hi' "phi" wrA
\\`!p snip.rv = match.group(1)`hi
endsnippet
context "math()"
snippet '([Cc])hi' "chi" wrA
\\`!p snip.rv = match.group(1)`hi
endsnippet
context "math()"
snippet '([Pp])si' "psi" wrA
\\`!p snip.rv = match.group(1)`si
endsnippet
context "math()"
snippet '([Oo])me' "omega" wrA
\\`!p snip.rv = match.group(1)`mega
endsnippet
#========================}}}


#}}}
#=================================================================================================

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet


snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet



snippet td "superscript" iA
^{$1}$0
endsnippet

snippet \\ "Fraction" iA
\\frac{$1}{$2}$0
endsnippet 

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)\\' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)\\' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet


priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
